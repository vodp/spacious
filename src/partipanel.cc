// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "partipanel.H"
#include "partiview.H"

Fl_Menu_Item menu_ppui[] = {
 {"inertia", 0,  (Fl_Callback*)pp_inertia_on_cb, 0, 2, FL_NORMAL_LABEL, 0, 12, 3},
 {"H-R Diagram", 0,  (Fl_Callback*)pp_hrdiag_on_cb, 0, 2, FL_NORMAL_LABEL, 0, 14, 3},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_ppui(Fl_Light_Button* o, struct stuff **) {
  specks_commandfmt(&ppui.st, "label %d", o->value());
}

#include <FL/Fl_Pixmap.H>
static const char *idata_text[] = {
"16 16 -25 1",
" \377\377\377!\310\312\313\"tvx#vy{$|\200\202%>>@&lnp\'UVX(EFH)MNP*\\^`+dfh,i\
km-\212\216\220.\307\311\312/osu0\204\210\212""1\351\352\353""2\272\274\276""3\
ort4\222\226\230""56686\0\0\0""7\377\377\377""8iln",
"                ",
"                ",
"  4!!!444440$$  ",
"  -777777777#.# ",
"  \"777777777/123",
"  \"6666666678888",
"  \"667667666677,",
"  &777667776677&",
"  +777667766667+",
"  *777667776677*",
"  \'777667776677\'",
"  )777667776677)",
"  (776666776667(",
"  %777777777777%",
"  55555555555555",
"                "
};
static Fl_Pixmap image_text(idata_text);

static void cb_ppui1(Fl_Button* o, struct stuff **) {
  char homestr[120];
sprintf(homestr, "home %g %g %g  %g %g %g  (XYZ RxRyRz)", ppui.home[0], ppui.home[1], ppui.home[2], ppui.home[3], ppui.home[4], ppui.home[5]);
specks_commandfmt( &ppui.st, homestr, o->value());
}

static const char *idata_home[] = {
"21 20 -32 1",
" \377\377\377!\314\311\305\"\372\372\372#\322\320\314$\345\344\341%\377\377\
\377&\357\356\355\'\304\301\274(\327\324\321)\344\343\341*\347\346\344+\326\
\324\320,\354\353\351-\351\350\346.\323\321\315/\354\353\352""0\361\360\357""1\
\370\367\367""2\350\347\345""3\322\317\314""4\226\220\210""5\306\303\276""6\
\270\265\257""7\246\242\232""8\275\271\264""9\254\247\240:\276\273\266;\255\
\251\242<\357\356\354=\264\260\251>\244\240\230?\341\337\335",
"                     ",
"                     ",
"          ?  !\"#     ",
"         $%& \'%(     ",
"        )%%%**%+     ",
"       ,%%%%%%%+     ",
"      -%%%%%%%%.     ",
"     )%%%%%%%%%*     ",
"    $%%%%%%%%%%%/    ",
"   0%%%%%%%%%%%%%1   ",
"   ?%%%%%%%%%%%%%2   ",
"    %%%%%%%%%%%%%    ",
"    %%%%34445%%%%    ",
"    %%%%6   7%%%%    ",
"    %%%%8   9%%%%    ",
"    %%%%8   9%%%%    ",
"    %%%%:   ;%%%%    ",
"    <<<<=   ><<<<    ",
"                     ",
"                     "
};
static Fl_Pixmap image_home(idata_home);

#include <FL/Fl_Image.H>
static unsigned char idata_compass[] =
{1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,2,2,2,1,1,1,4,4,4,6,6,6,1,1,1,2,
2,2,2,2,2,2,2,2,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,
2,2,2,2,2,1,1,1,2,2,2,19,19,19,18,18,18,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,65,65,
65,18,18,18,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,125,125,125,41,41,41,1,1,1,1,1,1,2,
2,2,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,11,11,6,6,
6,3,3,3,0,0,0,3,3,3,207,207,207,62,62,62,13,13,13,0,0,0,1,1,1,21,21,21,6,6,6,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,0,0,0,193,193,193,13,13,13,71,
71,71,4,4,4,255,255,255,12,12,12,25,25,25,63,63,63,27,27,27,176,176,176,0,0,0,
1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,11,11,11,57,57,57,10,10,
10,162,162,162,246,246,246,32,32,32,152,152,152,0,0,0,90,90,90,15,15,15,1,1,1,
2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,65,65,65,0,0,0,221,221,
221,15,15,15,255,255,255,0,0,0,194,194,194,111,111,111,1,1,1,60,60,60,0,0,0,2,2,
2,3,3,3,2,2,2,1,1,1,1,1,1,1,1,1,3,3,3,2,2,2,15,15,15,29,29,29,161,161,161,98,
98,98,209,209,209,114,114,114,127,127,127,92,92,92,79,79,79,46,46,46,36,36,36,
0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,4,4,4,20,20,20,26,26,26,26,26,26,28,28,28,27,27,
27,14,14,14,22,22,22,47,47,47,71,71,71,30,30,30,154,154,154,244,244,244,243,
243,243,252,252,252,218,218,218,144,144,144,73,73,73,34,34,34,9,9,9,3,3,3,30,30,
30,85,85,85,146,146,146,208,208,208,108,108,108,255,255,255,255,255,255,174,
174,174,5,5,5,0,0,0,176,176,176,15,15,15,121,121,121,22,22,22,160,160,160,119,
119,119,73,73,73,32,32,32,6,6,6,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,46,46,46,61,61,61,
0,0,0,218,218,218,32,32,32,255,255,255,41,41,41,195,195,195,33,33,33,126,126,
126,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,2,2,2,1,1,1,2,2,2,0,0,0,0,0,0,87,87,87,0,0,0,
192,192,192,155,155,155,11,11,11,255,255,255,115,115,115,102,102,102,0,0,0,117,
117,117,0,0,0,1,1,1,0,0,0,2,2,2,1,1,1,2,2,2,1,1,1,1,1,1,2,2,2,1,1,1,15,15,15,
176,176,176,0,0,0,38,38,38,12,12,12,254,254,254,0,0,0,0,0,0,218,218,218,20,20,
20,1,1,1,1,1,1,2,2,2,2,2,2,1,1,1,2,2,2,0,0,0,0,0,0,1,1,1,2,2,2,155,155,155,17,
17,17,135,135,135,130,130,130,27,27,27,186,186,186,134,134,134,156,156,156,8,8,
8,169,169,169,0,0,0,2,2,2,2,2,2,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,2,2,2,2,2,2,0,0,
0,0,0,0,0,0,0,28,28,28,42,42,42,198,198,198,19,19,19,0,0,0,1,1,1,0,0,0,4,4,4,
1,1,1,2,2,2,2,2,2,1,1,1,2,2,2,1,1,1,2,2,2,1,1,1,1,1,1,2,2,2,3,3,3,0,0,0,2,2,2,
25,25,25,122,122,122,0,0,0,2,2,2,2,2,2,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,1,1,
1,2,2,2,0,0,0,1,1,1,1,1,1,3,3,3,1,1,1,1,1,1,1,1,1,20,20,20,62,62,62,0,0,0,0,0,
0,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,2,2,2,1,1,1,1,1,1,2,2,2,2,2,
2,1,1,1,1,1,1,1,1,1,19,19,19,25,25,25,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,3,3,3,8,8,
8,0,0,0,1,1,1,2,2,2,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1};
static Fl_RGB_Image image_compass(idata_compass, 20, 20, 3, 0);

static unsigned char idata_fly[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
255,255,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,
255,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,
255,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,181,255,255,255,255,
255,255,255,55,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
255,255,255,255,255,255,255,90,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,255,255,
255,109,255,255,255,255,255,255,255,248,255,255,255,6,255,255,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,254,255,255,255,233,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,255,255,255,36,255,255,255,255,255,255,255,254,255,255,255,198,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,
254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,197,255,255,255,
141,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,30,255,255,255,
255,255,255,255,254,255,255,255,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,118,255,255,
255,255,255,255,255,244,255,255,255,2,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,190,
255,255,255,255,255,255,255,45,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,
255,255,255,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_fly(idata_fly, 16, 16, 4, 0);

static unsigned char idata_orbit[] =
{255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,57,63,72,0,198,192,
183,15,198,192,183,207,198,192,183,254,198,192,183,207,198,192,183,15,57,63,72,
0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,57,63,72,0,198,192,183,191,
198,192,183,78,57,63,72,0,198,192,183,82,198,192,183,190,57,63,72,0,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,198,192,183,48,198,192,183,205,57,63,72,0,
255,255,255,0,255,255,255,0,198,192,183,205,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,198,192,183,143,198,192,183,94,57,63,72,0,255,255,255,0,
198,192,183,255,198,192,183,255,198,192,183,255,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,57,63,72,0,198,192,183,1,198,192,183,47,
57,63,72,0,198,192,183,239,198,192,183,27,255,255,255,0,255,255,255,0,255,255,
255,0,198,192,183,255,255,255,255,0,255,255,255,0,198,192,183,255,57,63,72,0,
198,192,183,1,57,63,72,0,198,192,183,16,198,192,183,190,198,192,183,205,57,63,
72,0,198,192,183,254,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
57,63,72,0,255,255,255,0,198,192,183,255,198,192,183,255,198,192,183,201,198,
192,183,193,198,192,183,17,198,192,183,208,198,192,183,82,255,255,255,0,255,255,
255,0,198,192,183,254,255,255,255,0,255,255,255,0,243,137,41,255,255,255,255,0,
57,63,72,0,255,255,255,0,255,255,255,0,198,192,183,255,255,255,255,0,198,192,
183,86,198,192,183,208,198,192,183,254,198,192,183,1,255,255,255,0,255,255,255,
0,198,192,183,255,255,255,255,0,243,137,41,255,243,137,41,255,243,137,41,255,
57,63,72,0,57,63,72,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
198,192,183,252,198,192,183,206,198,192,183,80,198,192,183,1,57,63,72,0,198,192,
183,255,255,255,255,0,255,255,255,0,243,137,41,255,255,255,255,0,57,63,72,0,57,
63,72,0,57,63,72,0,57,63,72,0,57,63,72,0,198,192,183,83,198,192,183,205,198,
192,183,14,198,192,183,190,198,192,183,206,57,63,72,0,198,192,183,252,57,63,72,
0,198,192,183,1,198,192,183,1,198,192,183,1,198,192,183,1,57,63,72,0,198,192,
183,27,198,192,183,91,198,192,183,201,198,192,183,192,198,192,183,16,255,255,
255,0,255,255,255,0,198,192,183,47,57,63,72,0,198,192,183,254,57,63,72,0,198,
192,183,254,198,192,183,255,198,192,183,255,198,192,183,252,198,192,183,255,198,
192,183,190,198,192,183,143,198,192,183,48,57,63,72,0,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,0,198,192,183,190,198,192,183,27,
255,255,255,0,255,255,255,0,255,255,255,0,57,63,72,0,57,63,72,0,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,198,192,183,142,198,192,183,91,255,255,255,0,
255,255,255,0,255,255,255,0,198,192,183,96,198,192,183,143,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,255,255,255,0,198,192,183,47,198,192,183,201,57,63,72,0,255,255,
255,0,57,63,72,0,198,192,183,202,198,192,183,47,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,57,63,72,0,198,192,183,192,198,192,183,83,57,63,72,0,198,192,183,
88,198,192,183,192,57,63,72,0,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
57,63,72,0,198,192,183,16,198,192,183,206,198,192,183,252,198,192,183,207,198,
192,183,15,57,63,72,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0};
static Fl_RGB_Image image_orbit(idata_orbit, 16, 16, 4, 0);

static unsigned char idata_rot[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,2,0,0,0,56,0,0,0,64,0,0,0,18,0,0,0,0,0,0,0,0,48,48,48,32,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,53,53,152,169,169,169,
255,236,236,236,255,243,243,243,255,191,191,191,255,92,92,92,196,69,69,69,90,57,
57,57,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,93,93,215,
255,255,255,255,198,198,198,255,158,158,158,222,155,155,155,211,175,175,175,255,
255,255,255,254,211,211,211,255,158,158,158,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,41,41,41,132,255,255,255,255,157,157,157,245,100,100,100,52,0,
0,0,0,0,0,0,0,104,104,104,85,191,191,191,255,255,255,255,255,187,187,187,255,
0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,109,109,209,190,190,190,
255,83,83,83,62,0,0,0,0,255,255,255,0,165,165,165,12,78,78,78,194,151,151,151,
220,155,155,155,250,149,149,149,255,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
230,230,230,1,221,221,221,44,112,112,112,79,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,
1,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,22,57,57,57,16,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,4,1,1,1,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,37,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,109,
109,255,150,150,150,255,127,127,127,229,66,66,66,198,26,26,26,51,0,0,0,0,0,0,0,
0,255,255,255,2,151,151,151,255,147,147,147,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,149,149,149,235,255,255,255,255,251,251,251,255,67,67,67,
168,0,0,0,0,0,0,0,0,0,0,0,10,89,89,89,207,255,255,255,254,102,102,102,208,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,129,129,199,230,230,230,255,255,
255,255,255,208,208,208,255,131,131,131,222,129,129,129,210,178,178,178,255,255,
255,255,254,148,148,148,253,113,113,113,22,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,68,68,68,167,108,108,108,150,110,110,110,155,165,165,165,255,
217,217,217,255,224,224,224,255,180,180,180,255,119,119,119,200,140,140,140,22,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,196,196,40,255,
255,255,9,255,255,255,2,255,255,255,20,126,126,126,65,113,113,113,70,224,224,
224,27,0,0,0,0,194,194,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_rot(idata_rot, 16, 16, 4, 0);

static const char *idata_trans[] = {
"16 16 -3 1",
" \377\377\377!\377\377\377\"\0\0\0",
"                ",
"                ",
"       \"        ",
"     \"!!        ",
"   \"!!!!\"\"\"\"\"\"  ",
"  \"!!!!!!!!!!!  ",
"    \"!!!        ",
"      \"!        ",
"        \"!\"     ",
"        \"!!!\"   ",
"  \"!!!!!!!!!!!  ",
"  \"\"\"\"\"\"\"!!!!\"  ",
"        \"!!\"    ",
"        \"\"      ",
"                ",
"                "
};
static Fl_Pixmap image_trans(idata_trans);

Fl_Menu_Item menu_ppui1[] = {
 {0, 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 3},
 {0, 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 3},
 {0, 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 3},
 {0, 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 11, 3},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_(Fl_Tile*, void*) {
  ppui.view->redraw();
ppui.imgdisp->redraw();
}

static void cb_ppui2(Fl_Button*, void*) {
  ppui.imgdisp->mode(FL_IMAGE_PAN);
}

static const char *idata_pan[] = {
"16 16 3 1",
" \tc None",
".\tc #000000",
"+\tc #FFFFFF",
"      .         ",
"    ..+..       ",
"   .+.+.+.      ",
"  ..+.+.+.      ",
" .+.+.+.+.  ..  ",
" .+.+.+.+. .++. ",
" .+.+.+.+..+++. ",
" .+++++++++++.  ",
" .++++++++++.   ",
" .+++++++++.    ",
" .+++++++++.    ",
"  .+++++++.     ",
"  .+++++++.     ",
"  .+++++++.     ",
"   .+++++.      ",
"   .+++++.      "
};
static Fl_Pixmap image_pan(idata_pan);

static void cb_ppui3(Fl_Button*, void*) {
  ppui.imgdisp->mode(FL_IMAGE_ZOOM_IN);
}

static const char *idata_zoom_in[] = {
"16 16 3 1",
" \tc None",
".\tc #FFFFFF",
"+\tc #000000",
"    ....        ",
"  ........      ",
" ..++++++..     ",
" .+++..+++.     ",
"..+++..+++..    ",
"..+......+..    ",
"..+......+..    ",
"..+++..+++..    ",
" .+++..+++.     ",
" ..++++++..     ",
"  ..........    ",
"    ....  ...   ",
"           ...  ",
"            ... ",
"             ...",
"              .."
};
static Fl_Pixmap image_zoom_in(idata_zoom_in);

static void cb_ppui4(Fl_Button*, void*) {
  ppui.imgdisp->mode(FL_IMAGE_ZOOM_OUT);
}

static const char *idata_zoom_out[] = {
"16 16 3 1",
" \tc None",
".\tc #FFFFFF",
"+\tc #000000",
"                ",
"                ",
"    ....        ",
"   .++++.       ",
"  .++++++.      ",
"  .+....+.      ",
"  .+....+.      ",
"  .++++++.      ",
"   .++++..      ",
"    .......     ",
"         ...    ",
"          ...   ",
"           ...  ",
"            ..  ",
"                ",
"                "
};
static Fl_Pixmap image_zoom_out(idata_zoom_out);

static void cb_ppui5(Fl_Button*, void*) {
  ppui.imgdisp->mode(FL_IMAGE_CLICK);
}

static unsigned char idata_lasso[] =
{0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,255,255,255,4,255,255,255,35,255,255,
255,98,255,255,255,161,255,255,255,221,255,255,255,233,255,255,255,233,255,255,
255,222,255,255,255,149,255,255,255,65,255,255,255,2,0,0,0,0,0,0,0,0,255,255,
255,0,0,0,0,0,255,255,255,29,255,255,255,185,254,254,254,245,255,255,255,229,
254,254,254,159,255,255,255,120,255,255,255,89,255,255,255,87,255,255,255,119,
255,255,255,182,255,255,255,254,255,255,255,137,255,255,255,3,0,0,0,0,255,255,
255,1,255,255,255,108,255,255,255,251,255,255,255,204,255,255,255,96,33,33,33,
19,255,255,255,7,255,255,255,3,255,255,255,0,255,255,255,0,255,255,255,2,165,
165,165,12,243,243,243,97,255,255,255,252,255,255,255,61,255,255,255,0,255,255,
255,127,255,255,255,254,255,255,255,139,255,255,255,31,253,253,253,5,255,255,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,219,
255,255,255,102,255,255,255,71,255,255,255,253,255,255,255,116,255,255,255,8,0,
0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,
0,0,255,255,255,39,255,255,255,255,255,255,255,66,255,255,255,183,255,255,255,
176,255,255,255,6,255,255,255,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,255,255,255,0,0,0,0,0,255,255,255,6,255,255,255,189,255,255,255,213,255,
255,255,22,255,255,255,227,255,255,255,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
255,255,0,0,0,0,0,255,255,255,0,255,255,255,0,0,0,0,0,255,255,255,18,254,254,
254,178,255,255,255,243,254,254,254,64,255,255,255,0,255,255,255,176,255,255,
255,176,255,255,255,99,255,255,255,152,255,255,255,103,255,255,255,1,255,255,
255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,93,255,255,255,218,255,255,255,235,
236,236,236,83,255,255,255,2,0,0,0,0,255,255,255,73,255,255,255,247,255,255,255,
255,255,255,255,243,255,255,255,255,255,255,255,153,255,255,255,19,255,255,255,
58,255,255,255,118,254,254,254,227,255,255,255,243,252,252,252,174,255,255,255,
21,255,255,255,2,0,0,0,0,255,255,255,0,255,255,255,26,255,255,255,224,255,255,
255,244,255,255,255,249,255,255,255,254,255,255,255,255,255,255,255,245,255,255,
255,246,255,255,255,203,255,255,255,137,244,244,252,60,229,229,228,16,255,255,
255,0,0,0,0,0,255,255,255,0,0,0,0,0,255,255,255,7,255,255,255,160,255,255,255,
253,255,255,255,254,255,255,255,234,255,255,255,164,227,227,227,45,50,50,49,29,
195,195,221,16,255,255,255,5,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,
0,0,255,255,255,0,255,255,255,29,255,255,255,143,255,255,255,245,254,255,255,
166,253,255,255,33,255,255,255,1,255,255,255,0,255,255,255,0,0,0,0,0,0,0,0,0,
255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,31,
255,255,255,237,255,255,255,72,0,0,0,0,255,255,255,0,255,255,255,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,255,
255,255,89,255,255,255,255,255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,
136,255,255,255,149,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,229,229,17,237,237,
237,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_lasso(idata_lasso, 16, 16, 4, 0);

static void cb_1(Fl_Light_Button* o, void*) {
  if (o->value())
{

ppui.imgdisp->activate_location_window(1);

}else

ppui.imgdisp->activate_location_window(0);
}

static unsigned char idata_map[] =
{255,255,255,0,255,255,255,0,0,0,0,0,255,255,255,4,255,255,255,87,255,255,
255,171,255,255,255,247,255,255,255,255,255,255,255,247,255,255,255,171,255,255,
255,87,255,255,255,4,0,0,0,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,1,255,255,255,118,255,255,255,252,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
252,255,255,255,118,255,255,255,1,255,255,255,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,56,255,255,255,243,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,243,255,255,255,56,255,255,255,0,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,255,255,255,115,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,168,255,255,255,60,255,255,255,168,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,115,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,148,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,25,0,0,0,0,255,255,255,23,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,148,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,138,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,12,0,0,0,0,255,255,255,12,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,138,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,255,255,255,82,255,255,255,253,255,255,
255,255,255,255,255,255,255,255,255,188,255,255,255,84,255,255,255,188,255,255,
255,255,255,255,255,255,255,255,255,253,255,255,255,82,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,24,255,255,255,213,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,213,255,255,255,24,255,255,255,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,0,0,0,0,255,255,255,127,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,255,255,255,0,255,255,
255,0,255,255,255,0,255,255,255,0,255,255,255,0,0,0,0,0,255,255,255,20,255,255,
255,245,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,245,255,255,255,20,0,0,0,0,255,255,255,0,255,255,255,0,255,
255,255,0,255,255,255,0,255,255,255,0,0,0,0,0,0,0,0,0,255,255,255,146,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,146,0,0,0,0,0,0,0,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,0,0,0,0,0,0,0,0,255,255,255,21,255,255,255,208,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,208,255,255,255,21,0,0,0,0,0,0,0,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,255,255,255,128,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,128,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,255,255,255,0,255,255,255,
0,255,255,255,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,4,255,255,
255,233,255,255,255,255,255,255,255,233,255,255,255,4,0,0,0,0,0,0,0,0,0,0,0,0,
255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,255,255,255,98,255,255,255,255,255,255,255,98,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,255,255,255,0,255,255,255,0,255,255,255,0,
255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,11,255,255,255,188,
255,255,255,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,255,255,255,0,255,
255,255,0};
static Fl_RGB_Image image_map(idata_map, 16, 16, 4, 0);

static void cb_ppui6(Fl_Value_Slider*, void*) {
  double x = ppui.adjcoeff1->value();
double y = ppui.adjcoeff2->value();
double z = ppui.adjcoeff3->value();

specks_commandfmt(&ppui.st,"center %f %f %f",x,y,z);

Point pmin = ppui.st->pboundmin_;
Point pmax = ppui.st->pboundmax_;
float coef = ppui.boxscale->value();
float dx = pmax.x[0] - pmin.x[0];
float dy = pmax.x[1] - pmin.x[1];
float dz = pmax.x[2] - pmin.x[2];
float logscale = pow(10.,coef);
dx = dx*logscale/2;
dy = dy*logscale/2;
dz = dz*logscale/2;
Point pcen;
parti_getcenter(&pcen);
specks_commandfmt(&ppui.st,"add box -n 1 -l 4 %f,%f,%f %f,%f,%f",x,y,z,dx,dy,dz);
specks_commandfmt(&ppui.st,"box on");
if (ppui.clipbtn->value())
specks_commandfmt(&ppui.st,"cb %f,%f,%f %f,%f,%f",x,y,z,dx,dy,dz);

spac_hitbox(pcen,dx,dy,dz);
}

static void cb_ppui7(Fl_Value_Slider*, void*) {
  double x = ppui.adjcoeff1->value();
double y = ppui.adjcoeff2->value();
double z = ppui.adjcoeff3->value();

specks_commandfmt(&ppui.st,"center %f %f %f",x,y,z);

Point pmin = ppui.st->pboundmin_;
Point pmax = ppui.st->pboundmax_;
float coef = ppui.boxscale->value();
float dx = pmax.x[0] - pmin.x[0];
float dy = pmax.x[1] - pmin.x[1];
float dz = pmax.x[2] - pmin.x[2];
float logscale = pow(10.,coef);
dx = dx*logscale/2;
dy = dy*logscale/2;
dz = dz*logscale/2;

Point pcen;
parti_getcenter(&pcen);

specks_commandfmt(&ppui.st,"add box -n 1 -l 4 %f,%f,%f %f,%f,%f",pcen.x[0],pcen.x[1],pcen.x[2],dx,dy,dz);
specks_commandfmt(&ppui.st,"box on");
if (ppui.clipbtn->value())
specks_commandfmt(&ppui.st,"cb %f,%f,%f %f,%f,%f",x,y,z,dx,dy,dz);

spac_hitbox(pcen,dx,dy,dz);
}

static void cb_ppui8(Fl_Value_Slider*, void*) {
  double x = ppui.adjcoeff1->value();
double y = ppui.adjcoeff2->value();
double z = ppui.adjcoeff3->value();

specks_commandfmt(&ppui.st,"center %f %f %f",x,y,z);

Point pmin = ppui.st->pboundmin_;
Point pmax = ppui.st->pboundmax_;
float coef = ppui.boxscale->value();
float dx = pmax.x[0] - pmin.x[0];
float dy = pmax.x[1] - pmin.x[1];
float dz = pmax.x[2] - pmin.x[2];
float logscale = pow(10.,coef);
dx = dx*logscale/2;
dy = dy*logscale/2;
dz = dz*logscale/2;

Point pcen;
parti_getcenter(&pcen);

specks_commandfmt(&ppui.st,"add box -n 1 -l 4 %f,%f,%f %f,%f,%f",pcen.x[0],pcen.x[1],pcen.x[2],dx,dy,dz);
specks_commandfmt(&ppui.st,"box on");
if (ppui.clipbtn->value())
specks_commandfmt(&ppui.st,"cb %f,%f,%f %f,%f,%f",x,y,z,dx,dy,dz);
spac_hitbox(pcen,dx,dy,dz);
}

static void cb_ppui9(Fl_Choice* o, void*) {
  spac_switch_dimensions(0,o->value());

// recoloring
char dimlabel[10];

int choice = ppui.choice_color->value();
int max_dim = ppui.st->sl->specks->dim;
if (choice < max_dim)
{
	sprintf(dimlabel,"a%d",choice+1);
	specks_commandfmt(&ppui.st,"color  %s",dimlabel);
}else
	specks_commandfmt(&ppui.st,"color onescol 1 1 1");
}

static void cb_ppuia(Fl_Choice* o, void*) {
  spac_switch_dimensions(1,o->value());

// recoloring
char dimlabel[10];

int choice = ppui.choice_color->value();
int max_dim = ppui.st->sl->specks->dim;
if (choice < max_dim)
{
	sprintf(dimlabel,"a%d",choice+1);
	specks_commandfmt(&ppui.st,"color  %s",dimlabel);
}else
	specks_commandfmt(&ppui.st,"color onescol 1 1 1");
}

static void cb_ppuib(Fl_Choice* o, void*) {
  spac_switch_dimensions(2,o->value());

// recoloring
char dimlabel[10];

int choice = ppui.choice_color->value();
int max_dim = ppui.st->sl->specks->dim;
if (choice < max_dim)
{
	sprintf(dimlabel,"a%d",choice+1);
	specks_commandfmt(&ppui.st,"color  %s",dimlabel);
}else
	specks_commandfmt(&ppui.st,"color onescol 1 1 1");
}

static void cb_ppuic(Fl_Choice* o, void*) {
  char dimlabel[10];

int choice = o->value();
int max_dim = ppui.st->sl->specks->dim;
if (choice < max_dim)
{
	sprintf(dimlabel,"a%d",choice+1);
	specks_commandfmt(&ppui.st,"color  %s",dimlabel);
}else
	specks_commandfmt(&ppui.st,"color onescol 1 1 1");
}

static void cb_ppuid(Fl_Light_Button* o, void*) {
  if (o->value())
{
Point pmin = ppui.st->pboundmin_;
Point pmax = ppui.st->pboundmax_;
float coef = ppui.boxscale->value();
float dx = pmax.x[0] - pmin.x[0];
float dy = pmax.x[1] - pmin.x[1];
float dz = pmax.x[2] - pmin.x[2];
float logscale = pow(10.,coef);
dx = dx*logscale/2;
dy = dy*logscale/2;
dz = dz*logscale/2;
Point pcen;
parti_getcenter(&pcen);

specks_commandfmt(&ppui.st,"clipbox %f,%f,%f %f,%f,%f",pcen.x[0],pcen.x[1],pcen.x[2],dx,dy,dz);
specks_commandfmt(&ppui.st,"cb on");
}else
specks_commandfmt(&ppui.st,"cb off");
}

static unsigned char idata_scissors[] =
{0,0,0,0,255,255,255,15,254,254,254,42,254,254,254,42,255,255,255,15,0,0,0,
0,254,254,254,0,0,0,0,0,255,255,255,0,0,0,0,0,254,254,254,28,254,254,254,152,
255,255,255,179,254,254,254,84,254,254,254,2,0,0,0,0,254,254,254,25,255,255,255,
211,254,254,254,255,254,254,254,255,255,255,255,211,255,255,255,25,255,255,255,
0,0,0,0,0,0,0,0,0,255,255,255,37,254,254,254,236,255,255,255,255,254,254,254,
255,255,255,255,255,255,255,255,69,0,0,0,0,255,255,255,168,255,255,255,255,255,
255,255,160,254,254,254,160,255,255,255,255,254,254,254,178,0,0,0,0,0,0,0,0,254,
254,254,30,255,255,255,237,254,254,254,254,255,255,255,254,254,254,254,255,255,
255,255,176,0,0,0,0,254,254,254,0,255,255,255,250,255,255,255,183,0,0,0,0,0,0,0,
0,254,254,254,181,255,255,255,255,0,0,0,0,254,254,254,30,254,254,254,227,254,
254,254,255,254,254,254,254,254,254,254,255,255,255,255,178,254,254,254,3,255,
255,255,0,254,254,254,0,254,254,254,221,254,254,254,231,254,254,254,2,255,255,
255,2,254,254,254,230,255,255,255,244,254,254,254,11,255,255,255,232,254,254,
254,254,255,255,255,254,255,255,255,255,255,255,255,194,0,0,0,0,255,255,255,7,
254,254,254,7,255,255,255,3,254,254,254,90,254,254,254,255,255,255,255,239,255,
255,255,237,255,255,255,255,255,255,255,240,254,254,254,225,255,255,255,255,254,
254,254,254,255,255,255,255,254,254,254,254,255,255,255,210,254,254,254,209,254,
254,254,208,255,255,255,209,255,255,255,179,0,0,0,0,255,255,255,95,254,254,254,
226,255,255,255,251,254,254,254,250,254,254,254,250,255,255,255,254,254,254,254,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,254,254,254,226,255,255,255,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,254,254,254,250,254,254,254,255,254,254,254,255,254,
254,254,255,254,254,254,255,254,254,254,255,254,254,254,255,254,254,254,255,254,
254,254,255,254,254,254,90,0,0,0,0,0,0,0,0,0,0,0,0,254,254,254,0,0,0,0,0,254,
254,254,154,254,254,254,255,254,254,254,203,255,255,255,128,255,255,255,132,255,
255,255,132,255,255,255,132,255,255,255,132,254,254,254,130,254,254,254,49,0,0,
0,0,0,0,0,0,0,0,0,0,254,254,254,0,0,0,0,0,254,254,254,123,255,255,255,255,254,
254,254,255,254,254,254,215,255,255,255,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,72,255,255,255,
255,254,254,254,231,255,255,255,141,254,254,254,247,255,255,255,234,255,255,255,
27,254,254,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,255,255,255,172,255,255,255,249,255,255,255,28,0,0,0,0,254,254,254,107,255,
255,255,255,254,254,254,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,255,255,255,161,255,255,255,255,255,255,255,46,0,0,0,0,
254,254,254,135,255,255,255,255,254,254,254,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,254,254,42,255,255,255,254,254,
254,254,255,255,255,255,197,255,255,255,255,255,255,255,218,254,254,254,17,255,
255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,254,254,0,
0,0,0,0,254,254,254,47,254,254,254,193,255,255,255,236,255,255,255,163,254,
254,254,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
static Fl_RGB_Image image_scissors(idata_scissors, 16, 15, 4, 0);

static void cb_ppuie(Fl_Slider* o, struct stuff **) {
  //specks_commandfmt(&ppui.st,"boxscale %f",o->value());
Point pmin = ppui.st->pboundmin_;
Point pmax = ppui.st->pboundmax_;
float coef = ppui.boxscale->value();
float dx = pmax.x[0] - pmin.x[0];
float dy = pmax.x[1] - pmin.x[1];
float dz = pmax.x[2] - pmin.x[2];
float logscale = pow(10.,coef);
dx = dx*logscale/2;
dy = dy*logscale/2;
dz = dz*logscale/2;

Point pcen;
parti_getcenter(&pcen);

specks_commandfmt(&ppui.st,"add box -n 1 -l 4 %f,%f,%f %f,%f,%f",pcen.x[0],pcen.x[1],pcen.x[2],dx,dy,dz);
specks_commandfmt(&ppui.st,"box on");
if (ppui.clipbtn->value())
specks_commandfmt(&ppui.st,"cb %f,%f,%f %f,%f,%f",pcen.x[0],pcen.x[1],pcen.x[2],dx,dy,dz);
spac_hitbox(pcen,dx,dy,dz);
}

static void cb_ppuif(Fl_Button*, void*) {
  Point pmin = ppui.st->pboundmin_;
Point pmax = ppui.st->pboundmax_;
float coef = ppui.boxscale->value();
float dx = pmax.x[0] - pmin.x[0];
float dy = pmax.x[1] - pmin.x[1];
float dz = pmax.x[2] - pmin.x[2];
dx = dx*coef/2;
dy = dy*coef/2;
dz = dz*coef/2;

Point pcen;
parti_getcenter(&pcen);

specks_commandfmt(&ppui.st,"add box -n 1 -l 4 %f,%f,%f %f,%f,%f",pcen.x[0],pcen.x[1],pcen.x[2],dx,dy,dz);
specks_commandfmt(&ppui.st,"box on");
specks_commandfmt(&ppui.st,"boxaxes on");
ppui.adjcoeff1->value(pcen.x[0]);
ppui.adjcoeff2->value(pcen.x[1]);
ppui.adjcoeff3->value(pcen.x[2]);

spac_hitbox(pcen,dx,dy,dz);
//specks_commandfmt(&ppui.st,"jump %f %f %f",pcen.x[0],pcen.x[1],pcen.x[2]);
}

static unsigned char idata_cube[] =
{0,0,0,0,0,0,0,0,0,2,2,2,113,113,113,116,116,116,148,148,148,127,127,127,60,
60,60,116,116,116,118,118,118,64,64,64,55,55,55,2,2,2,0,0,0,0,0,0,1,1,1,0,0,0,
0,0,0,75,75,75,229,229,229,123,123,123,224,224,224,208,208,208,176,176,176,
140,140,140,127,127,127,144,144,144,174,174,174,122,122,122,18,18,18,0,0,0,0,0,
0,5,5,5,122,122,122,198,198,198,107,107,107,248,248,248,254,254,254,254,254,
254,255,255,255,255,255,255,255,255,255,240,240,240,195,195,195,74,74,74,72,72,
72,0,0,0,0,0,0,152,152,152,212,212,212,143,143,143,249,249,249,255,255,255,254,
254,254,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,227,227,227,
134,134,134,53,53,53,1,1,1,127,127,127,201,201,201,111,111,111,255,255,255,252,
252,252,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
236,236,236,142,142,142,158,158,158,56,56,56,28,28,28,188,188,188,166,166,166,
255,255,255,254,254,254,254,254,254,254,254,254,254,254,254,253,253,253,253,253,
253,254,254,254,244,244,244,150,150,150,149,149,149,163,163,163,92,92,92,20,20,
20,48,48,48,203,203,203,232,232,232,241,241,241,248,248,248,250,250,250,253,
253,253,255,255,255,255,255,255,251,251,251,160,160,160,142,142,142,155,155,155,
166,166,166,130,130,130,113,113,113,135,135,135,149,149,149,213,213,213,212,212,
212,214,214,214,217,217,217,219,219,219,226,226,226,235,235,235,166,166,166,134,
134,134,147,147,147,158,158,158,172,172,172,157,157,157,140,140,140,210,210,210,
73,73,73,222,222,222,213,213,213,212,212,212,213,213,213,213,213,213,212,212,
212,211,211,211,150,150,150,135,135,135,148,148,148,161,161,161,174,174,174,162,
162,162,70,70,70,166,166,166,29,29,29,211,211,211,219,219,219,219,219,219,219,
219,219,219,219,219,219,219,219,221,221,221,174,174,174,134,134,134,147,147,147,
159,159,159,176,176,176,34,34,34,166,166,166,72,72,72,97,97,97,123,123,123,234,
234,234,231,231,231,231,231,231,231,231,231,232,232,232,235,235,235,214,214,214,
131,131,131,144,144,144,155,155,155,58,58,58,75,75,75,178,178,178,130,130,130,
215,215,215,37,37,37,250,250,250,247,247,247,243,243,243,245,245,245,244,244,
244,245,245,245,252,252,252,139,139,139,140,140,140,99,99,99,46,46,46,172,172,
172,20,20,20,23,23,23,139,139,139,47,47,47,86,86,86,162,162,162,210,210,210,232,
232,232,250,250,250,255,255,255,255,255,255,181,181,181,115,115,115,14,14,14,
223,223,223,71,71,71,0,0,0,0,0,0,5,5,5,168,168,168,153,153,153,82,82,82,21,21,
21,10,10,10,36,36,36,91,91,91,168,168,168,191,191,191,5,5,5,156,156,156,123,
123,123,1,1,1,0,0,0,0,0,0,0,0,0,20,20,20,72,72,72,107,107,107,159,159,159,197,
197,197,152,152,152,81,81,81,32,32,32,9,9,9,118,118,118,130,130,130,3,3,3,0,0,0,
0,0,0,3,3,3,0,0,0,1,1,1,1,1,1,3,3,3,32,32,32,119,119,119,64,64,64,64,64,64,
127,127,127,65,65,65,128,128,128,65,65,65,0,0,0,0,0,0,1,1,1};
static Fl_RGB_Image image_cube(idata_cube, 16, 16, 3, 0);

static void cb_ppui10(Fl_Light_Button* o, void*) {
  struct stuff* st = ppui.st;
struct specklist* sl;

if (!o->value())	
{
	for(sl = st->sl; sl != NULL; sl = sl->next)
	{
		// nulldata
		if(sl->specks == NULL)
			continue;
		specks_commandfmt(&ppui.st,"only= patchid 1-100000");
	}
}else
{

};
}

static const char *idata_filter[] = {
"16 16 -61 1",
" \377\377\377!~}~\"\263\263\263#\232\232\232$\252\252\253%\377\377\377&\363\
\363\363\'\202\202\203(\370\370\370)\246\246\247*\365\365\365+\254\254\255,\
\200\200\200-\330\330\330.\230\230\231/\342\342\342""0\216\216\216""1\355\355\
\355""2\311\311\311""3\275\274\275""4\204\204\205""5\237\236\237""6\300\300\
\301""7\273\272\273""8\344\344\345""9\217\217\220:\242\243\243;\240\240\241<\
\235\235\236=\225\225\226>\367\367\367?\255\255\256@\205\205\206""A\207\207\
\210""B\325\325\325""C\267\267\270""D\247\247\247""E\200\177\200""F\201\201\
\202G\201\202\201H\256\256\255I\221\221\222J\276\276\276K\366\366\366L\205\
\206\206M\256\255\256N\316\315\317O\313\312\314P\317\320\320Q\211\211\211R\
\205\206\205S\203\203\203T\244\244\245U\177\177\177V\245\245\246W\254\253\255X\
\373\373\373Y\327\327\330Z\213\213\213[\303\303\303\\\350\350\350",
"                ",
"                ",
" +$DT;<.=I0QLSE!",
" \">&%8-P[D5IASU[",
"  WK*(YNJD<0AF6 ",
"   )&XBOCD#9@J  ",
"    51>2\"V#Z3   ",
"     ./2+:=7    ",
"      I/$ZC     ",
"       \\?R      ",
"       \\M4      ",
"       \\?S      ",
"       \\?G      ",
"       \\H,      ",
"       @\'U      ",
"                "
};
static Fl_Pixmap image_filter(idata_filter);

static void cb_ppui11(Fl_Light_Button* o, void*) {
  if (o->value())
	spac_build_minspantree();
else
	spac_hide_spantree();
	
ppui.view->redraw();
}

static unsigned char idata_tree[] =
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,255,216,216,0,255,255,255,0,0,0,0,0,255,
255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,0,
255,255,255,0,0,0,0,0,255,255,255,102,211,195,151,124,0,0,0,0,0,0,0,0,225,225,
225,85,255,255,255,1,0,0,0,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,
0,0,0,0,0,254,254,254,6,0,0,0,0,244,244,246,99,191,193,194,79,200,200,199,207,
121,121,121,96,255,255,255,32,14,14,14,189,190,189,190,222,230,255,230,106,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,250,11,203,203,206,176,240,240,
240,49,255,255,199,122,104,68,46,134,255,255,255,6,226,226,226,255,232,232,232,
57,250,250,250,246,255,255,255,112,240,255,240,62,255,255,255,7,225,225,225,
117,0,0,0,0,0,0,0,0,0,0,0,0,252,252,255,75,227,227,171,165,255,255,255,33,212,
169,167,225,183,186,186,45,0,0,0,0,254,254,253,203,255,255,255,216,188,188,189,
94,255,255,217,102,163,163,178,18,79,79,79,25,253,253,253,158,125,125,125,39,
255,255,255,23,254,254,255,15,255,255,255,114,255,255,236,137,255,255,255,248,
220,222,213,223,253,240,240,214,0,0,0,25,225,230,226,246,148,149,142,144,0,0,0,
0,255,255,255,69,255,255,255,174,253,253,253,169,150,150,150,160,255,255,255,
89,253,255,255,3,255,255,255,12,255,255,255,30,251,251,251,88,254,254,254,193,
195,189,150,255,9,11,0,43,212,217,218,220,240,164,162,252,189,138,129,59,118,
118,242,4,255,255,254,46,254,254,248,255,255,255,255,255,255,255,255,210,255,
250,250,227,255,209,209,44,255,255,255,24,255,255,255,123,255,255,255,28,255,
255,255,27,255,254,251,188,166,166,94,234,227,226,232,106,249,237,223,252,229,
221,163,59,214,214,220,226,247,247,247,247,255,255,245,166,254,254,254,137,255,
255,255,9,255,255,255,8,255,255,255,12,0,0,0,0,0,0,0,0,255,255,255,0,255,255,
255,0,246,246,238,9,254,254,255,230,194,218,218,188,247,245,246,249,250,250,255,
147,177,177,139,245,255,255,255,21,0,0,0,0,255,255,255,32,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,18,255,255,255,244,255,
255,255,255,255,255,254,203,253,253,255,18,254,254,254,52,0,0,0,0,0,0,0,0,255,
255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
255,255,174,254,254,254,255,255,255,255,89,0,0,0,0,0,0,0,0,255,255,255,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,
255,255,141,255,255,255,255,205,205,205,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,
255,115,254,254,254,255,255,255,255,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,
92,255,255,255,255,197,204,204,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,70,
255,255,254,255,202,216,255,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0};
static Fl_RGB_Image image_tree(idata_tree, 16, 16, 4, 0);

static void cb_collapse(Fl_Menu_*, void*) {
  spac_collapse_spantree ();
ppui.view->redraw();
}

static void cb_expand(Fl_Menu_*, void*) {
  spac_expand_spantree();
ppui.view->redraw();
}

Fl_Menu_Item menu_[] = {
 {"collapse", 0,  (Fl_Callback*)cb_collapse, 0, 0, FL_NORMAL_LABEL, 1, 11, 3},
 {"expand", 0,  (Fl_Callback*)cb_expand, 0, 0, FL_NORMAL_LABEL, 1, 11, 3},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Double_Window* make_window() {
  { Fl_Double_Window* o = ppui.mainwin = new Fl_Double_Window(535, 635);
    ppui.mainwin->box(FL_DOWN_BOX);
    ppui.mainwin->labelcolor((Fl_Color)FL_GRAY0);
    { Fl_Pack* o = new Fl_Pack(0, 0, 535, 635);
      { ppui.toprow = new Fl_Group(0, 0, 535, 27);
        { ppui.more = new Fl_Menu_Button(1, 1, 49, 25, "More");
          ppui.more->box(FL_GTK_THIN_UP_BOX);
          ppui.more->down_box(FL_GTK_THIN_DOWN_BOX);
          ppui.more->color((Fl_Color)FL_FOREGROUND_COLOR);
          ppui.more->selection_color((Fl_Color)FL_INACTIVE_COLOR);
          ppui.more->labelsize(11);
          ppui.more->labelcolor((Fl_Color)3);
          ppui.more->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          ppui.more->deactivate();
          { Fl_Menu_Item* o = &menu_ppui[0];
            ppui.inertiaon = o;
          }
          { Fl_Menu_Item* o = &menu_ppui[1];
            ppui.hrdiagon = o;
          }
          ppui.more->menu(menu_ppui);
        } // Fl_Menu_Button* ppui.more
        { ppui.objgroup = new Fl_Group(160, 0, 375, 27);
          ppui.objgroup->color((Fl_Color)48);
          ppui.objgroup->selection_color((Fl_Color)48);
          { ppui.label = new Fl_Light_Button(161, 1, 40, 25);
            ppui.label->box(FL_GTK_THIN_UP_BOX);
            ppui.label->down_box(FL_GTK_THIN_DOWN_BOX);
            ppui.label->color((Fl_Color)FL_FOREGROUND_COLOR);
            ppui.label->selection_color((Fl_Color)2);
            ppui.label->image(image_text);
            ppui.label->labelfont(1);
            ppui.label->labelsize(12);
            ppui.label->labelcolor((Fl_Color)3);
            ppui.label->callback((Fl_Callback*)cb_ppui, (void*)(&ppui.st));
            ppui.label->when(FL_WHEN_CHANGED);
            ppui.label->deactivate();
          } // Fl_Light_Button* ppui.label
          { ppui.homejump = new Fl_Button(201, 1, 40, 25);
            ppui.homejump->box(FL_GTK_THIN_UP_BOX);
            ppui.homejump->down_box(FL_GTK_THIN_DOWN_BOX);
            ppui.homejump->color((Fl_Color)FL_FOREGROUND_COLOR);
            ppui.homejump->selection_color((Fl_Color)3);
            ppui.homejump->image(image_home);
            ppui.homejump->labelfont(1);
            ppui.homejump->labelsize(12);
            ppui.homejump->callback((Fl_Callback*)cb_ppui1, (void*)(&ppui.st));
            ppui.homejump->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
          } // Fl_Button* ppui.homejump
          { ppui.slidergroup = new Fl_Group(295, 0, 240, 27);
            ppui.slidergroup->box(FL_FLAT_BOX);
            ppui.slidergroup->when(FL_WHEN_CHANGED);
            { ppui.sldtype = new Fl_Menu_Button(298, 1, 40, 25, "slum");
              ppui.sldtype->tooltip("menu for choosing type of slider");
              ppui.sldtype->box(FL_GTK_THIN_UP_BOX);
              ppui.sldtype->down_box(FL_GTK_THIN_DOWN_BOX);
              ppui.sldtype->color((Fl_Color)FL_FOREGROUND_COLOR);
              ppui.sldtype->selection_color((Fl_Color)35);
              ppui.sldtype->labelsize(11);
              ppui.sldtype->labelcolor((Fl_Color)3);
              ppui.sldtype->textsize(12);
              ppui.sldtype->textcolor((Fl_Color)35);
              ppui.sldtype->callback((Fl_Callback*)pp_sldtype_cb);
              ppui.sldtype->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
            } // Fl_Menu_Button* ppui.sldtype
            { ppui.slum = new Fl_Value_Slider(375, 2, 160, 10, "log slum");
              ppui.slum->type(3);
              ppui.slum->box(FL_GTK_THIN_DOWN_BOX);
              ppui.slum->color((Fl_Color)48);
              ppui.slum->selection_color((Fl_Color)94);
              ppui.slum->labelfont(1);
              ppui.slum->labelsize(12);
              ppui.slum->minimum(-3);
              ppui.slum->maximum(4.5);
              ppui.slum->step(0.025);
              ppui.slum->textsize(8);
              ppui.slum->textcolor((Fl_Color)3);
              ppui.slum->callback((Fl_Callback*)pp_slum_cb, (void*)(&ppui.st));
            } // Fl_Value_Slider* ppui.slum
            { ppui.genericslider = new Fl_Value_Slider(327, 0, 208, 20, "generic slider");
              ppui.genericslider->type(5);
              ppui.genericslider->color((Fl_Color)35);
              ppui.genericslider->selection_color((Fl_Color)4);
              ppui.genericslider->labelsize(12);
              ppui.genericslider->labelcolor((Fl_Color)3);
              ppui.genericslider->minimum(-3);
              ppui.genericslider->maximum(4.5);
              ppui.genericslider->step(0.025);
              ppui.genericslider->textcolor((Fl_Color)3);
              ppui.genericslider->callback((Fl_Callback*)pp_genericslider_cb);
              ppui.genericslider->when(3);
              ppui.genericslider->hide();
              Fl_Group::current()->resizable(ppui.genericslider);
            } // Fl_Value_Slider* ppui.genericslider
            { Fl_Button* o = ppui.linlog = new Fl_Button(338, 1, 35, 25, "log");
              ppui.linlog->box(FL_GTK_THIN_UP_BOX);
              ppui.linlog->down_box(FL_GTK_THIN_DOWN_BOX);
              ppui.linlog->color((Fl_Color)FL_FOREGROUND_COLOR);
              ppui.linlog->selection_color((Fl_Color)3);
              ppui.linlog->labelsize(11);
              ppui.linlog->labelcolor((Fl_Color)3);
              ppui.linlog->callback((Fl_Callback*)pp_linlog_cb);
              ppui.linlog->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
              o->value(0); //initially slum slider is visible
              o->type(FL_TOGGLE_BUTTON);
            } // Fl_Button* ppui.linlog
            //steven marx: version 0.7.02
            ppui.slidergroup->end();
            Fl_Group::current()->resizable(ppui.slidergroup);
          } // Fl_Group* ppui.slidergroup
          ppui.objgroup->end();
          Fl_Group::current()->resizable(ppui.objgroup);
        } // Fl_Group* ppui.objgroup
        { ppui.obj = new Fl_Menu_Button(50, 1, 45, 25, "[gN]");
          ppui.obj->box(FL_GTK_THIN_UP_BOX);
          ppui.obj->down_box(FL_GTK_THIN_DOWN_BOX);
          ppui.obj->color((Fl_Color)FL_FOREGROUND_COLOR);
          ppui.obj->labelsize(11);
          ppui.obj->labelcolor((Fl_Color)3);
          ppui.obj->textcolor((Fl_Color)48);
          ppui.obj->callback((Fl_Callback*)pp_obj_cb);
          ppui.obj->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          ppui.obj->deactivate();
        } // Fl_Menu_Button* ppui.obj
        { ppui.nav = new Fl_Menu_Button(94, 1, 40, 25);
          ppui.nav->box(FL_GTK_THIN_UP_BOX);
          ppui.nav->down_box(FL_GTK_THIN_DOWN_BOX);
          ppui.nav->color((Fl_Color)FL_FOREGROUND_COLOR);
          ppui.nav->image(image_compass);
          ppui.nav->labelfont(1);
          ppui.nav->labelsize(11);
          ppui.nav->labelcolor((Fl_Color)3);
          ppui.nav->textsize(12);
          ppui.nav->callback((Fl_Callback*)pp_nav_cb, (void*)(&ppui.st));
          ppui.nav->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          { Fl_Menu_Item* o = &menu_ppui1[0];
          o->image(image_fly);
          }
          { Fl_Menu_Item* o = &menu_ppui1[1];
          o->image(image_orbit);
          }
          { Fl_Menu_Item* o = &menu_ppui1[2];
          o->image(image_rot);
          }
          { Fl_Menu_Item* o = &menu_ppui1[3];
          o->image(image_trans);
          }
          ppui.nav->menu(menu_ppui1);
        } // Fl_Menu_Button* ppui.nav
        ppui.toprow->end();
      } // Fl_Group* ppui.toprow
      { Fl_Scroll_Thin* o = new Fl_Scroll_Thin(1, 26, 534, 33);
        o->type(1);
        o->box(FL_NO_BOX);
        o->color((Fl_Color)FL_BACKGROUND_COLOR);
        o->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor((Fl_Color)FL_GRAY0);
        o->align(65);
        o->when(FL_WHEN_RELEASE);
        o->hide();
        o->deactivate();
        { Fl_Pack* o = ppui.objtogs = new Fl_Pack(1, 26, 473, 32);
          ppui.objtogs->type(1);
          ppui.objtogs->color((Fl_Color)96);
          { Fl_Button* o = new Fl_Button(6, 26, 30, 32, "g0");
            o->type(1);
            o->box(FL_DOWN_BOX);
            o->color((Fl_Color)38);
            o->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
            o->labelsize(12);
            o->labelcolor((Fl_Color)3);
            o->callback((Fl_Callback*)pp_objtog_cb);
          } // Fl_Button* o
          o->spacing(2);
          ppui.objtogs->end();
        } // Fl_Pack* ppui.objtogs
        o->end();
      } // Fl_Scroll_Thin* o
      { ppui.maintile = new Fl_Tile(0, 60, 535, 575);
        ppui.maintile->color((Fl_Color)139);
        ppui.maintile->labelsize(11);
        ppui.maintile->align(65);
        { ppui.cmdhist = new Hist(0, 60, 535, 87);
          ppui.cmdhist->box(FL_NO_BOX);
          ppui.cmdhist->color((Fl_Color)96);
          ppui.cmdhist->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
          ppui.cmdhist->labeltype(FL_NORMAL_LABEL);
          ppui.cmdhist->labelfont(0);
          ppui.cmdhist->labelsize(14);
          ppui.cmdhist->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
          ppui.cmdhist->align(FL_ALIGN_TOP);
          ppui.cmdhist->when(FL_WHEN_RELEASE);
          { HistBrowser* o = new HistBrowser(1, 60, 534, 62);
            o->type(2);
            o->box(FL_GTK_THIN_DOWN_BOX);
            o->color((Fl_Color)FL_FOREGROUND_COLOR);
            o->selection_color((Fl_Color)1);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(12);
            o->labelcolor((Fl_Color)128);
            o->textsize(12);
            o->textcolor((Fl_Color)3);
            o->align(FL_ALIGN_BOTTOM);
            o->when(FL_WHEN_RELEASE_ALWAYS);
            Fl_Group::current()->resizable(o);
            o->scrollbar.align( FL_ALIGN_LEFT );
            o->scrollbar_width( 8 );
            o->hist(ppui.cmdhist);
          } // HistBrowser* o
          { Fl_Group* o = new Fl_Group(0, 120, 535, 27);
            { HistInput* o = ppui.cmd = new HistInput(1, 122, 534, 25);
              ppui.cmd->box(FL_GTK_THIN_DOWN_BOX);
              ppui.cmd->color((Fl_Color)38);
              ppui.cmd->selection_color((Fl_Color)9);
              ppui.cmd->labeltype(FL_NORMAL_LABEL);
              ppui.cmd->labelfont(1);
              ppui.cmd->labelsize(10);
              ppui.cmd->labelcolor((Fl_Color)3);
              ppui.cmd->textcolor((Fl_Color)55);
              ppui.cmd->callback((Fl_Callback*)pp_cmd_cb);
              ppui.cmd->align(FL_ALIGN_LEFT);
              ppui.cmd->when(FL_WHEN_ENTER_KEY_ALWAYS);
              o->cursor_color( o->textcolor() );
              o->hist( ppui.cmdhist );
            } // HistInput* ppui.cmd
            o->end();
          } // Fl_Group* o
          ppui.cmdhist->end();
        } // Hist* ppui.cmdhist
        { Fl_Tile* o = new Fl_Tile(1, 147, 534, 488);
          o->box(FL_EMBOSSED_BOX);
          o->callback((Fl_Callback*)cb_);
          { Fl_Gview* o = ppui.view = new Fl_Gview(35, 174, 271, 461);
            ppui.view->box(FL_DOWN_BOX);
            ppui.view->color((Fl_Color)FL_BACKGROUND_COLOR);
            ppui.view->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
            ppui.view->labeltype(FL_NORMAL_LABEL);
            ppui.view->labelfont(0);
            ppui.view->labelsize(14);
            ppui.view->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            ppui.view->align(FL_ALIGN_TOP);
            ppui.view->when(FL_WHEN_RELEASE);
            o->cursor(FL_CURSOR_CROSS);
            ppui.view->end();
          } // Fl_Gview* ppui.view
          { ppui.imgdisp = new Fl_Image_Display(306, 174, 229, 461);
            ppui.imgdisp->box(FL_DOWN_BOX);
            ppui.imgdisp->color((Fl_Color)FL_BACKGROUND_COLOR);
            ppui.imgdisp->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
            ppui.imgdisp->labeltype(FL_NORMAL_LABEL);
            ppui.imgdisp->labelfont(0);
            ppui.imgdisp->labelsize(14);
            ppui.imgdisp->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
            ppui.imgdisp->align(FL_ALIGN_TOP);
            ppui.imgdisp->when(FL_WHEN_RELEASE);
            ppui.imgdisp->end();
          } // Fl_Image_Display* ppui.imgdisp
          { Fl_Group* o = new Fl_Group(306, 147, 229, 28);
            o->box(FL_FLAT_BOX);
            { ppui.radiobtn_pan = new Fl_Button(306, 149, 35, 25);
              ppui.radiobtn_pan->type(102);
              ppui.radiobtn_pan->box(FL_GTK_THIN_UP_BOX);
              ppui.radiobtn_pan->down_box(FL_GTK_THIN_DOWN_BOX);
              ppui.radiobtn_pan->color((Fl_Color)FL_FOREGROUND_COLOR);
              ppui.radiobtn_pan->image(image_pan);
              ppui.radiobtn_pan->labelcolor((Fl_Color)3);
              ppui.radiobtn_pan->callback((Fl_Callback*)cb_ppui2);
            } // Fl_Button* ppui.radiobtn_pan
            { ppui.radiobtn_zoomin = new Fl_Button(341, 149, 35, 25);
              ppui.radiobtn_zoomin->type(102);
              ppui.radiobtn_zoomin->box(FL_GTK_THIN_UP_BOX);
              ppui.radiobtn_zoomin->down_box(FL_GTK_THIN_DOWN_BOX);
              ppui.radiobtn_zoomin->color((Fl_Color)FL_FOREGROUND_COLOR);
              ppui.radiobtn_zoomin->image(image_zoom_in);
              ppui.radiobtn_zoomin->labelcolor((Fl_Color)3);
              ppui.radiobtn_zoomin->callback((Fl_Callback*)cb_ppui3);
            } // Fl_Button* ppui.radiobtn_zoomin
            { ppui.radiobtn_zoomout = new Fl_Button(376, 149, 35, 25);
              ppui.radiobtn_zoomout->type(102);
              ppui.radiobtn_zoomout->box(FL_GTK_THIN_UP_BOX);
              ppui.radiobtn_zoomout->down_box(FL_GTK_THIN_DOWN_BOX);
              ppui.radiobtn_zoomout->color((Fl_Color)FL_FOREGROUND_COLOR);
              ppui.radiobtn_zoomout->image(image_zoom_out);
              ppui.radiobtn_zoomout->labelcolor((Fl_Color)3);
              ppui.radiobtn_zoomout->callback((Fl_Callback*)cb_ppui4);
            } // Fl_Button* ppui.radiobtn_zoomout
            { ppui.radiobtn_wand = new Fl_Button(411, 149, 35, 25);
              ppui.radiobtn_wand->type(102);
              ppui.radiobtn_wand->box(FL_GTK_THIN_UP_BOX);
              ppui.radiobtn_wand->down_box(FL_GTK_THIN_DOWN_BOX);
              ppui.radiobtn_wand->color((Fl_Color)FL_FOREGROUND_COLOR);
              ppui.radiobtn_wand->image(image_lasso);
              ppui.radiobtn_wand->labelcolor((Fl_Color)3);
              ppui.radiobtn_wand->callback((Fl_Callback*)cb_ppui5);
            } // Fl_Button* ppui.radiobtn_wand
            { Fl_Group* o = new Fl_Group(490, 149, 45, 25);
              o->end();
              Fl_Group::current()->resizable(o);
            } // Fl_Group* o
            { Fl_Light_Button* o = new Fl_Light_Button(445, 149, 35, 25);
              o->box(FL_GTK_THIN_UP_BOX);
              o->down_box(FL_GTK_THIN_DOWN_BOX);
              o->color((Fl_Color)FL_FOREGROUND_COLOR);
              o->image(image_map);
              o->callback((Fl_Callback*)cb_1);
            } // Fl_Light_Button* o
            o->end();
          } // Fl_Group* o
          { ppui.adjustgrp = new Fl_Group(1, 147, 34, 488);
            ppui.adjustgrp->box(FL_FLAT_BOX);
            ppui.adjustgrp->labelcolor((Fl_Color)3);
            { ppui.adjcoeff1 = new Fl_Value_Slider(3, 207, 10, 428);
              ppui.adjcoeff1->type(2);
              ppui.adjcoeff1->box(FL_GTK_THIN_DOWN_BOX);
              ppui.adjcoeff1->selection_color((Fl_Color)1);
              ppui.adjcoeff1->labelsize(10);
              ppui.adjcoeff1->labelcolor((Fl_Color)3);
              ppui.adjcoeff1->step(0.005);
              ppui.adjcoeff1->textsize(1);
              ppui.adjcoeff1->textcolor((Fl_Color)3);
              ppui.adjcoeff1->callback((Fl_Callback*)cb_ppui6);
              ppui.adjcoeff1->align(FL_ALIGN_TOP);
            } // Fl_Value_Slider* ppui.adjcoeff1
            { ppui.adjcoeff2 = new Fl_Value_Slider(13, 207, 10, 428);
              ppui.adjcoeff2->type(2);
              ppui.adjcoeff2->box(FL_GTK_THIN_DOWN_BOX);
              ppui.adjcoeff2->selection_color((Fl_Color)2);
              ppui.adjcoeff2->labelsize(10);
              ppui.adjcoeff2->labelcolor((Fl_Color)3);
              ppui.adjcoeff2->step(0.005);
              ppui.adjcoeff2->textsize(8);
              ppui.adjcoeff2->textcolor((Fl_Color)3);
              ppui.adjcoeff2->callback((Fl_Callback*)cb_ppui7);
              ppui.adjcoeff2->align(FL_ALIGN_TOP);
            } // Fl_Value_Slider* ppui.adjcoeff2
            { ppui.adjcoeff3 = new Fl_Value_Slider(23, 207, 10, 428);
              ppui.adjcoeff3->type(2);
              ppui.adjcoeff3->box(FL_GTK_THIN_DOWN_BOX);
              ppui.adjcoeff3->selection_color((Fl_Color)4);
              ppui.adjcoeff3->labelsize(11);
              ppui.adjcoeff3->labelcolor((Fl_Color)3);
              ppui.adjcoeff3->step(0.005);
              ppui.adjcoeff3->textsize(8);
              ppui.adjcoeff3->textcolor((Fl_Color)3);
              ppui.adjcoeff3->callback((Fl_Callback*)cb_ppui8);
              ppui.adjcoeff3->align(FL_ALIGN_TOP);
            } // Fl_Value_Slider* ppui.adjcoeff3
            { ppui.choice1 = new Fl_Choice(1, 147, 34, 15);
              ppui.choice1->box(FL_GTK_THIN_UP_BOX);
              ppui.choice1->down_box(FL_BORDER_BOX);
              ppui.choice1->color((Fl_Color)1);
              ppui.choice1->selection_color((Fl_Color)FL_BACKGROUND2_COLOR);
              ppui.choice1->callback((Fl_Callback*)cb_ppui9);
            } // Fl_Choice* ppui.choice1
            { ppui.choice2 = new Fl_Choice(1, 162, 34, 15);
              ppui.choice2->box(FL_GTK_THIN_UP_BOX);
              ppui.choice2->down_box(FL_BORDER_BOX);
              ppui.choice2->color((Fl_Color)2);
              ppui.choice2->callback((Fl_Callback*)cb_ppuia);
            } // Fl_Choice* ppui.choice2
            { ppui.choice3 = new Fl_Choice(1, 177, 34, 15);
              ppui.choice3->box(FL_GTK_THIN_UP_BOX);
              ppui.choice3->down_box(FL_BORDER_BOX);
              ppui.choice3->color((Fl_Color)4);
              ppui.choice3->callback((Fl_Callback*)cb_ppuib);
            } // Fl_Choice* ppui.choice3
            { ppui.choice_color = new Fl_Choice(1, 192, 34, 15);
              ppui.choice_color->box(FL_GTK_THIN_UP_BOX);
              ppui.choice_color->down_box(FL_BORDER_BOX);
              ppui.choice_color->color((Fl_Color)48);
              ppui.choice_color->callback((Fl_Callback*)cb_ppuic);
            } // Fl_Choice* ppui.choice_color
            ppui.adjustgrp->end();
          } // Fl_Group* ppui.adjustgrp
          { Fl_Group* o = new Fl_Group(35, 147, 271, 27);
            o->box(FL_FLAT_BOX);
            o->labelfont(1);
            o->labelsize(11);
            { ppui.clipbtn = new Fl_Light_Button(35, 148, 35, 25);
              ppui.clipbtn->box(FL_GTK_THIN_UP_BOX);
              ppui.clipbtn->color((Fl_Color)FL_FOREGROUND_COLOR);
              ppui.clipbtn->image(image_scissors);
              ppui.clipbtn->labelsize(11);
              ppui.clipbtn->labelcolor((Fl_Color)3);
              ppui.clipbtn->callback((Fl_Callback*)cb_ppuid);
            } // Fl_Light_Button* ppui.clipbtn
            { ppui.boxscale = new Fl_Slider(255, 151, 51, 10, "focus range");
              ppui.boxscale->type(3);
              ppui.boxscale->box(FL_GTK_THIN_DOWN_BOX);
              ppui.boxscale->selection_color((Fl_Color)94);
              ppui.boxscale->labelfont(1);
              ppui.boxscale->labelsize(11);
              ppui.boxscale->minimum(-4);
              ppui.boxscale->maximum(0);
              ppui.boxscale->step(0.05);
              ppui.boxscale->callback((Fl_Callback*)cb_ppuie, (void*)(&ppui.st));
              ppui.boxscale->align(34);
              Fl_Group::current()->resizable(ppui.boxscale);
            } // Fl_Slider* ppui.boxscale
            { ppui.focusbtn = new Fl_Button(105, 148, 35, 25);
              ppui.focusbtn->box(FL_GTK_THIN_UP_BOX);
              ppui.focusbtn->color((Fl_Color)FL_FOREGROUND_COLOR);
              ppui.focusbtn->selection_color((Fl_Color)3);
              ppui.focusbtn->image(image_cube);
              ppui.focusbtn->labelsize(11);
              ppui.focusbtn->labelcolor((Fl_Color)3);
              ppui.focusbtn->callback((Fl_Callback*)cb_ppuif);
            } // Fl_Button* ppui.focusbtn
            { ppui.highlightbtn = new Fl_Light_Button(70, 148, 35, 25);
              ppui.highlightbtn->box(FL_GTK_THIN_UP_BOX);
              ppui.highlightbtn->color((Fl_Color)FL_FOREGROUND_COLOR);
              ppui.highlightbtn->image(image_filter);
              ppui.highlightbtn->labelsize(11);
              ppui.highlightbtn->labelcolor((Fl_Color)3);
              ppui.highlightbtn->callback((Fl_Callback*)cb_ppui10);
            } // Fl_Light_Button* ppui.highlightbtn
            { ppui.graphbtn = new Fl_Light_Button(140, 148, 35, 25);
              ppui.graphbtn->box(FL_GTK_THIN_UP_BOX);
              ppui.graphbtn->color((Fl_Color)FL_FOREGROUND_COLOR);
              ppui.graphbtn->image(image_tree);
              ppui.graphbtn->labelsize(11);
              ppui.graphbtn->labelcolor((Fl_Color)3);
              ppui.graphbtn->callback((Fl_Callback*)cb_ppui11);
            } // Fl_Light_Button* ppui.graphbtn
            { Fl_Menu_Button* o = new Fl_Menu_Button(175, 148, 35, 25);
              o->box(FL_GTK_THIN_UP_BOX);
              o->color((Fl_Color)FL_GRAY0);
              o->selection_color((Fl_Color)48);
              o->menu(menu_);
            } // Fl_Menu_Button* o
            o->end();
          } // Fl_Group* o
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Tile* o
        ppui.maintile->end();
        Fl_Group::current()->resizable(ppui.maintile);
      } // Fl_Tile* ppui.maintile
      o->spacing(0);
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Pack* o
    o->size_range(101,130);
    ppui.mainwin->end();
  } // Fl_Double_Window* ppui.mainwin
  { Fl_Double_Window* o = ppui.hrdiagwin = new Fl_Double_Window(280, 230);
    { Fl_Plot* o = ppui.hrdiag = new Fl_Plot(0, 0, 284, 234);
      ppui.hrdiag->box(FL_DOWN_BOX);
      ppui.hrdiag->color((Fl_Color)FL_FOREGROUND_COLOR);
      ppui.hrdiag->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      ppui.hrdiag->labeltype(FL_NORMAL_LABEL);
      ppui.hrdiag->labelfont(0);
      ppui.hrdiag->labelsize(14);
      ppui.hrdiag->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      ppui.hrdiag->align(FL_ALIGN_TOP);
      ppui.hrdiag->when(FL_WHEN_RELEASE);
      o->cursor(FL_CURSOR_CROSS);
      ppui.hrdiag->end();
      Fl_Group::current()->resizable(ppui.hrdiag);
    } // Fl_Plot* ppui.hrdiag
    o->hide();
    ppui.hrdiagwin->end();
  } // Fl_Double_Window* ppui.hrdiagwin
  return ppui.hrdiagwin;
}
